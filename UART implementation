library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity UART_Tx is
    Port (
        clk        : in  STD_LOGIC; -- System clock
        reset      : in  STD_LOGIC; -- System reset
        tx_start   : in  STD_LOGIC; -- Start transmission
        tx_data    : in  STD_LOGIC_VECTOR (7 downto 0); -- Data to transmit
        tx         : out STD_LOGIC; -- UART transmit line
        tx_done    : out STD_LOGIC  -- Transmission done signal
    );
end UART_Tx;

architecture Behavioral of UART_Tx is
    signal baud_count : INTEGER := 0;
    signal bit_count  : INTEGER range 0 to 9 := 0;
    signal tx_reg     : STD_LOGIC := '1';
    signal shift_reg  : STD_LOGIC_VECTOR (9 downto 0);
    signal tx_busy    : STD_LOGIC := '0';
begin

    process(clk, reset)
    begin
        if reset = '1' then
            baud_count <= 0;
            bit_count <= 0;
            tx_reg <= '1';
            tx_busy <= '0';
            tx_done <= '0';
        elsif rising_edge(clk) then
            if tx_start = '1' and tx_busy = '0' then
                shift_reg <= '0' & tx_data & '1'; -- Start, Data, Stop bits
                tx_busy <= '1';
                tx_done <= '0';
                bit_count <= 0;
            elsif tx_busy = '1' then
                if baud_count = 868 then -- Assuming 50 MHz clock, 115200 baud
                    baud_count <= 0;
                    tx_reg <= shift_reg(0);
                    shift_reg <= shift_reg(9 downto 1) & '1';
                    bit_count <= bit_count + 1;
                    if bit_count = 9 then
                        tx_busy <= '0';
                        tx_done <= '1';
                    end if;
                else
                    baud_count <= baud_count + 1;
                end if;
            end if;
        end if;
    end process;

    tx <= tx_reg;

end Behavioral;
