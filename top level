library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Top-Level Entity Declaration
entity TopLevel is
    Port (
        clk          : in  std_logic;    -- System clock
        reset        : in  std_logic;    -- System reset
        select_spi   : in  std_logic;    -- Select SPI or UART
        spi_mosi     : out std_logic;    -- SPI Master Out Slave In
        spi_miso     : in  std_logic;    -- SPI Master In Slave Out
        spi_sclk     : out std_logic;    -- SPI Clock
        spi_cs       : out std_logic;    -- SPI Chip Select
        uart_tx      : out std_logic;    -- UART Transmit
        uart_rx      : in  std_logic;    -- UART Receive
        data_in      : in  std_logic_vector(7 downto 0);  -- Data input for transmission
        data_out     : out std_logic_vector(7 downto 0);  -- Data output from reception
        data_ready   : out std_logic     -- Data ready signal
    );
end TopLevel;

-- Architecture Definition
architecture Behavioral of TopLevel is

    -- Signal Declarations
    signal spi_data_out : std_logic_vector(7 downto 0);
    signal uart_data_out : std_logic_vector(7 downto 0);
    signal spi_data_ready : std_logic;
    signal uart_data_ready : std_logic;

begin

    -- SPI Module Instantiation
    SPI_Inst : entity work.SPI
        port map (
            clk => clk,
            reset => reset,
            mosi => spi_mosi,
            miso => spi_miso,
            sclk => spi_sclk,
            cs => spi_cs,
            data_in => data_in,
            data_out => spi_data_out,
            data_ready => spi_data_ready
        );

    -- UART Module Instantiation
    UART_Inst : entity work.UART
        port map (
            clk => clk,
            reset => reset,
            tx => uart_tx,
            rx => uart_rx,
            data_in => data_in,
            data_out => uart_data_out,
            data_ready => uart_data_ready
        );

    -- Data Selection Logic
    process(clk, reset)
    begin
        if reset = '1' then
            data_out <= (others => '0');
            data_ready <= '0';
        elsif rising_edge(clk) then
            if select_spi = '1' then
                data_out <= spi_data_out;
                data_ready <= spi_data_ready;
            else
                data_out <= uart_data_out;
                data_ready <= uart_data_ready;
            end if;
        end if;
    end process;

end Behavioral;
